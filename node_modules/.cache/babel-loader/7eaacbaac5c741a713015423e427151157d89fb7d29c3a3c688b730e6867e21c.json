{"ast":null,"code":"var _jsxFileName = \"/Users/kazuboy/Desktop/ai-medical-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questionsData = [{\n  id: 1,\n  question: \"体の痛みはありますか？\",\n  options: [{\n    text: \"はい\",\n    nextQuestionId: 2\n  }, {\n    text: \"いいえ\",\n    nextQuestionId: 3\n  }]\n}, {\n  id: 2,\n  question: \"痛みがある部位を教えてください。\",\n  options: [{\n    text: \"頭\",\n    nextQuestionId: 4\n  }, {\n    text: \"腹部\",\n    nextQuestionId: 4\n  }]\n}, {\n  id: 3,\n  question: \"特に問題がないようですね。ほかに質問はありますか？\",\n  options: [{\n    text: \"はい\",\n    nextQuestionId: 5\n  }, {\n    text: \"いいえ\",\n    nextQuestionId: null\n  }]\n}, {\n  id: 4,\n  question: \"痛みの度合いを教えてください（1〜10）。\",\n  options: Array.from({\n    length: 10\n  }, (_, i) => ({\n    text: `${i + 1}`,\n    nextQuestionId: null\n  }))\n}, {\n  id: 5,\n  question: \"別の症状を教えてください。\",\n  options: [{\n    text: \"頭痛\",\n    nextQuestionId: 4\n  }, {\n    text: \"発熱\",\n    nextQuestionId: 4\n  }]\n}];\nfunction App() {\n  _s();\n  const [currentQuestionId, setCurrentQuestionId] = useState(1);\n  const currentQuestion = questionsData.find(q => q.id === currentQuestionId);\n  const [recognitionActive, setRecognitionActive] = useState(false);\n  const [transcript, setTranscript] = useState('');\n\n  // Web Speech API を使った音声認識\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      const recognition = new SpeechRecognition();\n      recognition.lang = 'ja-JP'; // 日本語を指定\n      recognition.interimResults = false; // 結果を最終的なものにする\n      recognition.continuous = false; // 1回だけ音声認識を行う\n      recognition.onresult = event => {\n        const speechResult = event.results[0][0].transcript;\n        setTranscript(speechResult);\n        handleVoiceCommand(speechResult); // 音声認識結果を元に回答を選択\n      };\n      recognition.onend = () => {\n        setRecognitionActive(false);\n      };\n\n      // 音声認識を開始する関数\n      const startRecognition = () => {\n        if (!recognitionActive) {\n          setRecognitionActive(true);\n          recognition.start();\n        }\n      };\n      const recognitionButton = document.querySelector('#start-recognition');\n      if (recognitionButton) {\n        recognitionButton.addEventListener('click', startRecognition);\n      }\n\n      // クリーンアップ処理\n      return () => {\n        if (recognitionButton) {\n          recognitionButton.removeEventListener('click', startRecognition);\n        }\n      };\n    } else {\n      alert(\"Web Speech APIがこのブラウザでサポートされていません\");\n    }\n  }, [recognitionActive]);\n\n  // 音声認識の結果に基づいて質問に答える処理\n  const handleVoiceCommand = speechResult => {\n    const option = currentQuestion.options.find(o => o.text === speechResult.trim());\n    if (option) {\n      setCurrentQuestionId(option.nextQuestionId);\n    } else {\n      alert(\"認識できませんでした。もう一度試してください。\");\n    }\n  };\n\n  // ボタンのクリックで質問を進める処理\n  const handleOptionClick = nextQuestionId => {\n    if (nextQuestionId) {\n      setCurrentQuestionId(nextQuestionId);\n    } else {\n      alert(\"問診が完了しました。\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI\\u554F\\u8A3A\\u30A2\\u30D7\\u30EA\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: currentQuestion.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleOptionClick(option.nextQuestionId),\n          children: option.text\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u97F3\\u58F0\\u8A8D\\u8B58: \", transcript]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"start-recognition\",\n        children: \"\\u97F3\\u58F0\\u3067\\u7B54\\u3048\\u308B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g78kgm/roZaMbxCzIhqIZe3VpdE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","questionsData","id","question","options","text","nextQuestionId","Array","from","length","_","i","App","_s","currentQuestionId","setCurrentQuestionId","currentQuestion","find","q","recognitionActive","setRecognitionActive","transcript","setTranscript","SpeechRecognition","window","webkitSpeechRecognition","recognition","lang","interimResults","continuous","onresult","event","speechResult","results","handleVoiceCommand","onend","startRecognition","start","recognitionButton","document","querySelector","addEventListener","removeEventListener","alert","option","o","trim","handleOptionClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/kazuboy/Desktop/ai-medical-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst questionsData = [\n  {\n    id: 1,\n    question: \"体の痛みはありますか？\",\n    options: [\n      { text: \"はい\", nextQuestionId: 2 },\n      { text: \"いいえ\", nextQuestionId: 3 }\n    ]\n  },\n  {\n    id: 2,\n    question: \"痛みがある部位を教えてください。\",\n    options: [\n      { text: \"頭\", nextQuestionId: 4 },\n      { text: \"腹部\", nextQuestionId: 4 }\n    ]\n  },\n  {\n    id: 3,\n    question: \"特に問題がないようですね。ほかに質問はありますか？\",\n    options: [\n      { text: \"はい\", nextQuestionId: 5 },\n      { text: \"いいえ\", nextQuestionId: null }\n    ]\n  },\n  {\n    id: 4,\n    question: \"痛みの度合いを教えてください（1〜10）。\",\n    options: Array.from({ length: 10 }, (_, i) => ({\n      text: `${i + 1}`,\n      nextQuestionId: null\n    }))\n  },\n  {\n    id: 5,\n    question: \"別の症状を教えてください。\",\n    options: [\n      { text: \"頭痛\", nextQuestionId: 4 },\n      { text: \"発熱\", nextQuestionId: 4 }\n    ]\n  }\n];\n\nfunction App() {\n  const [currentQuestionId, setCurrentQuestionId] = useState(1);\n  const currentQuestion = questionsData.find(q => q.id === currentQuestionId);\n  const [recognitionActive, setRecognitionActive] = useState(false);\n  const [transcript, setTranscript] = useState('');\n\n  // Web Speech API を使った音声認識\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (SpeechRecognition) {\n      const recognition = new SpeechRecognition();\n      recognition.lang = 'ja-JP'; // 日本語を指定\n      recognition.interimResults = false; // 結果を最終的なものにする\n      recognition.continuous = false; // 1回だけ音声認識を行う\n      recognition.onresult = (event) => {\n        const speechResult = event.results[0][0].transcript;\n        setTranscript(speechResult);\n        handleVoiceCommand(speechResult); // 音声認識結果を元に回答を選択\n      };\n\n      recognition.onend = () => {\n        setRecognitionActive(false);\n      };\n\n      // 音声認識を開始する関数\n      const startRecognition = () => {\n        if (!recognitionActive) {\n          setRecognitionActive(true);\n          recognition.start();\n        }\n      };\n\n      const recognitionButton = document.querySelector('#start-recognition');\n      if (recognitionButton) {\n        recognitionButton.addEventListener('click', startRecognition);\n      }\n      \n      // クリーンアップ処理\n      return () => {\n        if (recognitionButton) {\n          recognitionButton.removeEventListener('click', startRecognition);\n        }\n      };\n    } else {\n      alert(\"Web Speech APIがこのブラウザでサポートされていません\");\n    }\n  }, [recognitionActive]);\n\n  // 音声認識の結果に基づいて質問に答える処理\n  const handleVoiceCommand = (speechResult) => {\n    const option = currentQuestion.options.find(o => o.text === speechResult.trim());\n    if (option) {\n      setCurrentQuestionId(option.nextQuestionId);\n    } else {\n      alert(\"認識できませんでした。もう一度試してください。\");\n    }\n  };\n\n  // ボタンのクリックで質問を進める処理\n  const handleOptionClick = (nextQuestionId) => {\n    if (nextQuestionId) {\n      setCurrentQuestionId(nextQuestionId);\n    } else {\n      alert(\"問診が完了しました。\");\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>AI問診アプリ</h1>\n      {currentQuestion && (\n        <div className=\"container\">\n          <h2>{currentQuestion.question}</h2>\n          <div className=\"button-container\">\n            {currentQuestion.options.map((option, index) => (\n              <button key={index} onClick={() => handleOptionClick(option.nextQuestionId)}>\n                {option.text}\n              </button>\n            ))}\n          </div>\n          <p>音声認識: {transcript}</p>\n          <button id=\"start-recognition\">\n            音声で答える\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}